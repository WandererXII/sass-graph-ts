#!/usr/bin/env node
import path from 'path';
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';
import { SassGraph } from '../dist/sass-graph.js';

const argv = yargs(hideBin(process.argv))
  .strict()
  .usage('Usage: $0 <command> [options] <dir> [file]')
  .command('json <dir>', 'Output the index in JSON format')
  .command('ancestors <dir> [file]', 'Output the ancestors')
  .command('descendents <dir> [file]', 'Output the descendents')
  .example('$0 ancestors -I src src/ src/_footer.scss', 'outputs the ancestors of src/_footer.scss')
  .option('I', {
    alias: 'load-path',
    default: [process.cwd()],
    describe: 'Add directories to the sass load path',
    type: 'array',
  })
  .option('e', {
    alias: 'extensions',
    default: ['scss', 'sass'],
    describe: 'File extensions to include in the graph',
    type: 'array',
  })
  .option('f', {
    alias: 'follow',
    default: false,
    describe: 'Follow symbolic links',
    type: 'boolean',
  })
  .version()
  .alias('v', 'version')
  .help('h')
  .alias('h', 'help')
  .parse();

try {
  let loadPaths = argv.loadPath;
  if (process.env.SASS_PATH) {
    loadPaths = loadPaths.concat(process.env.SASS_PATH.split(/:/).map((f) => path.resolve(f)));
  }

  const graph = SassGraph.parseDir(argv.dir, {
      extensions: argv.extensions,
      loadPaths: loadPaths,
      follow: argv.follow,
    }),
    command = argv._[0];

  if (command === 'json') {
    console.log(JSON.stringify(graph.index, null, 4));
    process.exit(0);
  } else if (command === 'ancestors') {
    graph.visitAncestors(path.resolve(argv.file), (f) => {
      console.log(f);
    });
  } else if (command === 'descendents') {
    graph.visitDescendents(path.resolve(argv.file), (f) => {
      console.log(f);
    });
  } else {
    throw new Error('Invalid command:', command);
  }
} catch (e) {
  if (e.code === 'ENOENT') {
    console.error(`Error: no such file or directory "${e.path}"`);
  } else {
    console.log(`Error: ${e.message}`);
  }

  process.exit(1);
}
